package generator

import (
	"encoding/json"
	"fmt"
	"reflect"
	"testing"
)

// func TestGenerateHelmTemplates(t *testing.T) {
// 	type args struct {
// 		template               string
// 		values                 string
// 		domainValues           string
// 		route                  RouteV2
// 		monitoringContact      string
// 		monitoringStatusPageID string
// 		monitoringEnabled      bool
// 		activeStandby          bool
// 	}
// 	tests := []struct {
// 		name    string
// 		args    args
// 		want    string
// 		wantErr bool
// 	}{
// 		{
// 			name: "example.com",
// 			args: args{
// 				template:     "test-resources/helmcharts/custom-ingress",
// 				values:       "test-resources/values.yaml",
// 				domainValues: "test-resources/example.com.yaml",
// 				route: RouteV2{
// 					Domain:         "extra-long-name.a-really-long-name-that-should-truncate.www.example.com",
// 					Service:        "nginx",
// 					MonitoringPath: "/",
// 					Insecure:       strPtr("Redirect"),
// 					HSTS:           strPtr("null"),
// 					TLSAcme:        strPtr("true"),
// 					Annotations: map[string]string{
// 						"custom-annotation": "custom annotation value",
// 					},
// 					Fastly: Fastly{
// 						Watch: false,
// 					},
// 				},
// 				monitoringContact:      "abcdefg",
// 				monitoringStatusPageID: "12345",
// 				monitoringEnabled:      true,
// 			},
// 			want: `---
// # Source: custom-ingress/templates/ingress.yaml
// apiVersion: networking.k8s.io/v1
// kind: Ingress
// # data:
// #   hsts:
// #   hsts-max-age:
// #   ssl-redirect: true
// metadata:
//   name: extra-long-name-f6c8a
//   labels:
//     dioscuri.amazee.io/migrate: ""
//     lagoon.sh/autogenerated: "false"
//     helm.sh/chart: custom-ingress-0.1.0
//     app.kubernetes.io/name: custom-ingress
//     app.kubernetes.io/instance: extra-long-name-f6c8a
//     app.kubernetes.io/managed-by: Helm
//     lagoon.sh/service: extra-long-name-f6c8a
//     lagoon.sh/service-type: custom-ingress
//     lagoon.sh/project: myexample-project
//     lagoon.sh/environment: environment-with-really-really-reall-3fdb
//     lagoon.sh/environmentType: development
//     lagoon.sh/buildType: branch
//   annotations:
//     # force-ssl-redirect handling
//     nginx.ingress.kubernetes.io/ssl-redirect: "true"
//     ingress.kubernetes.io/ssl-redirect: "true"
//     nginx.ingress.kubernetes.io/server-snippet: |-
//        add_header X-Robots-Tag "noindex, nofollow";
//     monitor.stakater.com/enabled: "true"
//     uptimerobot.monitor.stakater.com/interval: "60"
//     uptimerobot.monitor.stakater.com/alert-contacts: "abcdefg"
//     monitor.stakater.com/overridePath: "/"
//     uptimerobot.monitor.stakater.com/status-pages: "12345"
//     # HSTS Handling
//     kubernetes.io/tls-acme: "true"
//     # use a specific fastly service
//     fastly.amazee.io/watch: "false"
//     # use a custom secret for this ingress (customer supplied fastly integration)
//     lagoon.sh/version: "v2.x.x"
//     lagoon.sh/branch: "environment-with-really-really-reall-3fdb"
//     custom-annotation: custom annotation value
// spec:
//   tls:
//     - hosts:
//         -  extra-long-name.a-really-long-name-that-should-truncate.www.example.com
//       secretName: extra-long-name-f6c8a-tls
//   rules:
//     - host: extra-long-name.a-really-long-name-that-should-truncate.www.example.com
//       http:
//         paths:
//           - path: "/"
//             pathType: Prefix
//             backend:
//               service:
//                 name: nginx
//                 port:
//                   name: http
// `,
// 			wantErr: false,
// 		},
// 	}
// 	for _, tt := range tests {
// 		t.Run(tt.name, func(t *testing.T) {
// 			got, err := GenerateHelmTemplates(tt.args.template, tt.args.values, tt.args.domainValues, tt.args.route, tt.args.monitoringContact, tt.args.monitoringStatusPageID, tt.args.monitoringEnabled, tt.args.activeStandby)
// 			if (err != nil) != tt.wantErr {
// 				t.Errorf("GenerateHelmTemplates() error = %v, wantErr %v", err, tt.wantErr)
// 				return
// 			}
// 			err = os.Remove(tt.args.domainValues)
// 			if err != nil {
// 				t.Errorf("os.Remove(%s) error = %v", tt.args.domainValues, err)
// 				return
// 			}
// 			if !reflect.DeepEqual(string(got), tt.want) {
// 				t.Errorf("GenerateHelmTemplates() = %v, want %v", string(got), tt.want)
// 			}

// 		})
// 	}
// }

func TestGenerateKubeTemplate(t *testing.T) {
	type args struct {
		route                  RouteV2
		values                 LagoonValues
		monitoringContact      string
		monitoringStatusPageID string
		monitoringEnabled      bool
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "test1",
			args: args{
				route: RouteV2{
					Domain:         "extra-long-name.a-really-long-name-that-should-truncate.www.example.com",
					Service:        "nginx",
					MonitoringPath: "/",
					Insecure:       strPtr("Redirect"),
					HSTS:           strPtr("null"),
					TLSAcme:        strPtr("true"),
					Annotations: map[string]string{
						"custom-annotation": "custom annotation value",
					},
					Fastly: Fastly{
						Watch: false,
					},
				},
				values: LagoonValues{
					Project:         "example-project",
					Environment:     "environment-with-really-really-reall-3fdb",
					EnvironmentType: "development",
					Namespace:       "myexample-project-environment-with-really-really-reall-3fdb",
					BuildType:       "branch",
					LagoonVersion:   "v2.x.x",
					Kubernetes:      "lagoon.local",
					Branch:          "environment-with-really-really-reall-3fdb",
				},
				monitoringContact:      "abcdefg",
				monitoringStatusPageID: "12345",
				monitoringEnabled:      true,
			},
			want: `---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    custom-annotation: custom annotation value
    fastly.amazee.io/watch: "false"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
    lagoon.sh/branch: environment-with-really-really-reall-3fdb
    lagoon.sh/version: v2.x.x
    monitor.stakater.com/enabled: "true"
    monitor.stakater.com/overridePath: /
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Robots-Tag "noindex, nofollow";
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    uptimerobot.monitor.stakater.com/alert-contacts: abcdefg
    uptimerobot.monitor.stakater.com/interval: "60"
    uptimerobot.monitor.stakater.com/status-pages: "12345"
  creationTimestamp: null
  labels:
    app.kubernetes.io/instance: extra-long-name.a-really-long-name-that-should-truncate.www.example.com
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-ingress
    dioscuri.amazee.io/migrate: "false"
    helm.sh/chart: custom-ingress-0.1.0
    lagoon.sh/autogenerated: "false"
    lagoon.sh/buildType: branch
    lagoon.sh/environment: environment-with-really-really-reall-3fdb
    lagoon.sh/environmentType: development
    lagoon.sh/project: example-project
    lagoon.sh/service: extra-long-name.a-really-long-name-that-should-truncate.www.example.com
    lagoon.sh/service-type: custom-ingress
  name: extra-long-name-f6c8a
spec:
  rules:
  - host: extra-long-name.a-really-long-name-that-should-truncate.www.example.com
    http:
      paths:
      - backend:
          service:
            name: nginx
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - extra-long-name.a-really-long-name-that-should-truncate.www.example.com
    secretName: extra-long-name-f6c8a-tls
status:
  loadBalancer: {}
`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := GenerateKubeTemplate(tt.args.route, tt.args.values, tt.args.monitoringContact, tt.args.monitoringStatusPageID, tt.args.monitoringEnabled)
			if !reflect.DeepEqual(string(got), tt.want) {
				t.Errorf("GenerateKubeTemplate() = %v, want %v", string(got), tt.want)
			}
		})
	}
}

func TestReadValuesFile(t *testing.T) {
	type args struct {
		file string
	}
	tests := []struct {
		name string
		args args
		want LagoonValues
	}{
		{
			name: "read values",
			args: args{
				file: "test-resources/values.yaml",
			},
			want: LagoonValues{
				Project:                         "myexample-project",
				Environment:                     "environment-with-really-really-reall-3fdb",
				EnvironmentType:                 "development",
				Namespace:                       "myexample-project-environment-with-really-really-reall-3fdb",
				BuildType:                       "branch",
				LagoonVersion:                   "v2.x.x",
				Kubernetes:                      "lagoon.local",
				Branch:                          "environment-with-really-really-reall-3fdb",
				RoutesAutogeneratePrefixes:      []string{"www"},
				RoutesAutogenerateInsecure:      "true",
				RoutesAutogenerateEnabled:       "true",
				RoutesAutogeneratePrefixHyphens: "false",
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := ReadValuesFile(tt.args.file); !reflect.DeepEqual(got, tt.want) {
				stra, _ := json.Marshal(got)
				strb, _ := json.Marshal(tt.want)
				fmt.Println(string(stra))
				fmt.Println(string(strb))
				t.Errorf("ReadValuesFile() = %v, want %v", got, tt.want)
			}
		})
	}
}
