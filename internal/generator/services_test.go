package generator

import (
	"encoding/json"
	"reflect"
	"testing"

	composetypes "github.com/compose-spec/compose-go/types"
	"github.com/uselagoon/build-deploy-tool/internal/helpers"
	"github.com/uselagoon/build-deploy-tool/internal/lagoon"
)

func Test_composeToServiceValues(t *testing.T) {
	type args struct {
		lYAML              *lagoon.YAML
		lagoonValues       *BuildValues
		lagoonServiceTypes *lagoon.EnvironmentVariable
		csName             string
		csValues           composetypes.ServiceConfig
	}
	tests := []struct {
		name    string
		args    args
		want    ServiceValues
		wantErr bool
	}{
		{
			name: "test1",
			args: args{
				lYAML: &lagoon.YAML{
					Environments: lagoon.Environments{
						"main": lagoon.Environment{},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "main",
					Branch:      "main",
					BuildType:   "branch",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{},
				csName:             "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
			},
		},
		{
			name: "test2 - override name",
			args: args{
				lYAML: &lagoon.YAML{
					Environments: lagoon.Environments{
						"main": lagoon.Environment{},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "main",
					Branch:      "main",
					BuildType:   "branch",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{},
				csName:             "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx",
						"lagoon.name": "nginx-php",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				OverrideName:               "nginx-php",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
			},
		},
		{
			name: "test3 - lagoon.yml type override",
			args: args{
				lYAML: &lagoon.YAML{
					Environments: lagoon.Environments{
						"main": lagoon.Environment{
							Types: map[string]string{
								"nginx": "nginx-php-persistent",
							},
						},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "main",
					Branch:      "main",
					BuildType:   "branch",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{},
				csName:             "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				Type:                       "nginx-php-persistent",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
			},
		},
		{
			name: "test4 - variable servicetypes type override",
			args: args{
				lYAML: &lagoon.YAML{
					Environments: lagoon.Environments{
						"main": lagoon.Environment{},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "main",
					Branch:      "main",
					BuildType:   "branch",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{
					Name:  "LAGOON_SERVICE_TYPES",
					Value: "nginx:nginx-php-persistent,mariadb:mariadb-dbaas",
				},
				csName: "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				Type:                       "nginx-php-persistent",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
			},
		},
		{
			name: "test5 - additional labels",
			args: args{
				lYAML: &lagoon.YAML{
					Environments: lagoon.Environments{
						"main": lagoon.Environment{},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "main",
					Branch:      "main",
					BuildType:   "branch",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{},
				csName:             "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type":                        "nginx",
						"lagoon.autogeneratedroute":          "false",
						"lagoon.autogeneratedroute.tls-acme": "false",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				Type:                       "nginx",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: false,
			},
		},
		{
			name: "test6 - lagoon.yml additional fields",
			args: args{
				lYAML: &lagoon.YAML{
					Routes: lagoon.Routes{
						Autogenerate: lagoon.Autogenerate{
							Enabled: helpers.BoolPtr(false),
						},
					},
					Environments: lagoon.Environments{
						"main": lagoon.Environment{
							AutogenerateRoutes: helpers.BoolPtr(true),
						},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "main",
					Branch:      "main",
					BuildType:   "branch",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{},
				csName:             "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				Type:                       "nginx-php",
				AutogeneratedRoutesEnabled: true,
				AutogeneratedRoutesTLSAcme: true,
			},
		},
		{
			name: "test7 - lagoon.yml additional fields pullrequest",
			args: args{
				lYAML: &lagoon.YAML{
					Routes: lagoon.Routes{
						Autogenerate: lagoon.Autogenerate{
							Enabled:           helpers.BoolPtr(true),
							AllowPullRequests: helpers.BoolPtr(false),
						},
					},
					Environments: lagoon.Environments{
						"main": lagoon.Environment{
							AutogenerateRoutes: helpers.BoolPtr(true),
						},
					},
				},
				lagoonValues: &BuildValues{
					Environment: "pr-123",
					Branch:      "pr-123",
					BuildType:   "pullrequest",
				},
				lagoonServiceTypes: &lagoon.EnvironmentVariable{},
				csName:             "nginx",
				csValues: composetypes.ServiceConfig{
					Labels: composetypes.Labels{
						"lagoon.type": "nginx-php",
					},
				},
			},
			want: ServiceValues{
				Name:                       "nginx",
				Type:                       "nginx-php",
				AutogeneratedRoutesEnabled: false,
				AutogeneratedRoutesTLSAcme: true,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := composeToServiceValues(tt.args.lYAML, tt.args.lagoonValues, tt.args.lagoonServiceTypes, tt.args.csName, tt.args.csValues)
			if (err != nil) != tt.wantErr {
				t.Errorf("composeToServiceValues() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			lValues, _ := json.Marshal(got)
			wValues, _ := json.Marshal(tt.want)
			if !reflect.DeepEqual(string(lValues), string(wValues)) {
				t.Errorf("composeToServiceValues() = %v, want %v", string(lValues), string(wValues))
			}
		})
	}
}
