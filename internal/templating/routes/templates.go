package routes

import (
	"fmt"
	"os"
	"strconv"
	"strings"

	"github.com/uselagoon/lagoon-routegen/internal/helpers"
	"github.com/uselagoon/lagoon-routegen/internal/lagoon"
	networkv1 "k8s.io/api/networking/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"sigs.k8s.io/yaml"
)

// ReadValuesFile .
func ReadValuesFile(file string) lagoon.BuildValues {
	rawYAML, err := os.ReadFile(file)
	if err != nil {
		panic(fmt.Errorf("couldn't read %v: %v", file, err))
	}
	lValues := &lagoon.BuildValues{}
	yaml.Unmarshal(rawYAML, lValues)
	return *lValues
}

// GenerateKubeTemplate generates the lagoon template to apply.
func GenerateKubeTemplate(route lagoon.RouteV2, lValues lagoon.BuildValues,
	monitoringContact, monitoringStatusPageID string,
	monitoringEnabled bool) []byte {
	ingressName := route.Domain
	if len(ingressName) >= 53 {
		ingressName = fmt.Sprintf("%s-%s", strings.Split(ingressName, ".")[0], helpers.GetMD5HashWithNewLine(ingressName)[:5])
	}
	ingress := &networkv1.Ingress{}
	ingress.TypeMeta = metav1.TypeMeta{
		Kind:       "Ingress",
		APIVersion: "networking.k8s.io/v1",
	}
	ingress.ObjectMeta.Name = ingressName
	ingress.ObjectMeta.Labels = map[string]string{
		"lagoon.sh/autogenerated":      "false",
		"helm.sh/chart":                fmt.Sprintf("%s-%s", "custom-ingress", "0.1.0"),
		"app.kubernetes.io/name":       "custom-ingress",
		"app.kubernetes.io/instance":   route.Domain,
		"app.kubernetes.io/managed-by": "Helm",
		"lagoon.sh/service":            route.Domain,
		"lagoon.sh/service-type":       "custom-ingress",
		"lagoon.sh/project":            lValues.Project,
		"lagoon.sh/environment":        lValues.Environment,
		"lagoon.sh/environmentType":    lValues.EnvironmentType,
		"lagoon.sh/buildType":          lValues.BuildType,
	}
	additionalLabels := map[string]string{}
	if route.Migrate != nil {
		additionalLabels["dioscuri.amazee.io/migrate"] = strconv.FormatBool(*route.Migrate)
	} else {
		additionalLabels["dioscuri.amazee.io/migrate"] = "false"
	}
	for key, value := range additionalLabels {
		ingress.ObjectMeta.Labels[key] = value
	}
	ingress.ObjectMeta.Annotations = map[string]string{
		"kubernetes.io/tls-acme":                    strconv.FormatBool(*route.TLSAcme),
		"fastly.amazee.io/watch":                    strconv.FormatBool(route.Fastly.Watch),
		"lagoon.sh/version":                         lValues.LagoonVersion,
		"uptimerobot.monitor.stakater.com/interval": "60", //this is hardcoded
	}
	additionalAnnotations := map[string]string{}
	additionalAnnotations["monitor.stakater.com/enabled"] = "false"
	if monitoringEnabled {
		additionalAnnotations["monitor.stakater.com/enabled"] = "true"
	}
	additionalAnnotations["uptimerobot.monitor.stakater.com/alert-contacts"] = "unconfigured"
	if monitoringContact != "" {
		additionalAnnotations["uptimerobot.monitor.stakater.com/alert-contacts"] = monitoringContact
	}
	if monitoringStatusPageID != "" {
		additionalAnnotations["uptimerobot.monitor.stakater.com/status-pages"] = monitoringStatusPageID
	}
	if route.MonitoringPath != "" {
		additionalAnnotations["monitor.stakater.com/overridePath"] = route.MonitoringPath
	}
	if route.Fastly.ServiceID != "" {
		additionalAnnotations["fastly.amazee.io/service-id"] = route.Fastly.ServiceID
	}
	if route.Fastly.APISecretName != "" {
		additionalAnnotations["fastly.amazee.io/api-secret-name"] = route.Fastly.APISecretName
	}
	if lValues.BuildType == "branch" {
		additionalAnnotations["lagoon.sh/branch"] = lValues.Branch
	} else if lValues.BuildType == "pullrequest" {
		additionalAnnotations["lagoon.sh/prNumber"] = lValues.PRNumber
		additionalAnnotations["lagoon.sh/prHeadBranch"] = lValues.PRHeadBranch
		additionalAnnotations["lagoon.sh/prBaseBranch"] = lValues.PRBaseBranch

	}
	if *route.Insecure == "Allow" {
		additionalAnnotations["nginx.ingress.kubernetes.io/ssl-redirect"] = "false"
		additionalAnnotations["ingress.kubernetes.io/ssl-redirect"] = "false"
	} else if *route.Insecure == "Redirect" || *route.Insecure == "None" {
		additionalAnnotations["nginx.ingress.kubernetes.io/ssl-redirect"] = "true"
		additionalAnnotations["ingress.kubernetes.io/ssl-redirect"] = "true"
	}
	if lValues.EnvironmentType == "development" {
		additionalAnnotations["nginx.ingress.kubernetes.io/server-snippet"] = "add_header X-Robots-Tag \"noindex, nofollow\";\n"
	}
	for key, value := range additionalAnnotations {
		ingress.ObjectMeta.Annotations[key] = value
	}
	for key, value := range route.Annotations {
		ingress.ObjectMeta.Annotations[key] = value
	}
	ingress.Spec.TLS = []networkv1.IngressTLS{
		{
			Hosts:      []string{route.Domain},
			SecretName: fmt.Sprintf("%s-tls", ingressName),
		},
	}
	pt := networkv1.PathTypePrefix
	ingress.Spec.Rules = []networkv1.IngressRule{
		{
			Host: route.Domain,
			IngressRuleValue: networkv1.IngressRuleValue{
				HTTP: &networkv1.HTTPIngressRuleValue{
					Paths: []networkv1.HTTPIngressPath{
						{
							Path:     "/",
							PathType: &pt,
							Backend: networkv1.IngressBackend{
								Service: &networkv1.IngressServiceBackend{
									Name: route.Service,
									Port: networkv1.ServiceBackendPort{
										Name: "http",
									},
								},
							},
						},
					},
				},
			},
		},
	}
	ingressBytes, _ := yaml.Marshal(ingress)
	// add the seperator to the template so that it can be `kubectl apply` in bulk as part
	// of the current build process
	// @TODO: we should review this in the future when we stop doing `kubectl apply` in the builds :)
	separator := []byte("---\n")
	result := append(separator[:], ingressBytes[:]...)
	return result
}

// WriteTemplateFile writes the template to a file.
func WriteTemplateFile(templateOutputFile string, data []byte) {
	err := os.WriteFile(templateOutputFile, data, 0644)
	if err != nil {
		fmt.Println(err)
		return
	}
}
