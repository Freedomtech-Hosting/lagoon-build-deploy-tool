package cmd

import (
	"fmt"
	"io/ioutil"
	"os"
	"reflect"
	"testing"
)

func TestAutogeneratedIngressGeneration(t *testing.T) {
	type args struct {
		alertContact       string
		statusPageID       string
		projectName        string
		environmentName    string
		branch             string
		prNumber           string
		prHeadBranch       string
		prBaseBranch       string
		environmentType    string
		buildType          string
		activeEnvironment  string
		standbyEnvironment string
		cacheNoCache       string
		serviceID          string
		secretPrefix       string
		projectVars        string
		envVars            string
		lagoonVersion      string
		lagoonYAML         string
		valuesFilePath     string
		templatePath       string
	}
	tests := []struct {
		name     string
		args     args
		wantErr  bool
		emptyDir bool // if no templates are generated, then there will be a .gitkeep file in there
		want     string
	}{
		{
			name: "test1 autogenerated route",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/single-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test1-results",
		},
		{
			name: "test2 no autogenerated routes but allow pullrequests",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "pullrequest",
				prNumber:        "123",
				prHeadBranch:    "main",
				prBaseBranch:    "main2",
				lagoonVersion:   "v2.7.x",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/pr-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test2-results",
		},
		{
			name: "test3 autogenerated route but no pullrequests",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "pullrequest",
				prNumber:        "123",
				prHeadBranch:    "main",
				prBaseBranch:    "main2",
				lagoonVersion:   "v2.7.x",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/pr2-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: true,
			want:     "test-resources/template-autogenerated/test3-results",
		},
		{
			name: "test4 autogenerated route no service in pattern",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/single-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test4-results",
		},
		{
			name: "test5 autogenerated route short url",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "ci-features-control-k8s",
				environmentName: "short-router-url-from-a-very-l-ebe8",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "short-router-url-from-a-very-long-environment-name-like-this",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}.${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/single-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test5-results",
		},
		{
			name: "test6 autogenerated routes but disabled by service label",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/autogentrue-servicefalse-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: true,
			want:     "test-resources/template-autogenerated/test6-results",
		},
		{
			name: "test7 no autogenerated routes but enabled by service label",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars:     `[{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"}]`,
				envVars:         `[]`,
				secretPrefix:    "fastly-api-",
				lagoonYAML:      "test-resources/template-autogenerated/autogenfalse-servicetrue-lagoon.yml",
				templatePath:    "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test7-results",
		},
		{
			name: "test8 autogenerated routes with fastly",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars: `[
					{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"},
					{"name":"LAGOON_FASTLY_SERVICE_ID","value":"service-id:true","scope":"global"}
					]`,
				envVars:      `[]`,
				secretPrefix: "fastly-api-",
				lagoonYAML:   "test-resources/template-autogenerated/single-lagoon.yml",
				templatePath: "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test8-results",
		},
		{
			name: "test9 autogenerated routes with fastly specific domain",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars: `[
					{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"},
					{"name":"LAGOON_FASTLY_SERVICE_IDS","value":"node-example-project-main.example.com:service-id:true","scope":"global"}
					]`,
				envVars:      `[]`,
				secretPrefix: "fastly-api-",
				lagoonYAML:   "test-resources/template-autogenerated/single-lagoon.yml",
				templatePath: "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test9-results",
		},
		{
			name: "test10 autogenerated routes with fastly and specific secret",
			args: args{
				alertContact:    "alertcontact",
				statusPageID:    "statuspageid",
				projectName:     "example-project",
				environmentName: "main",
				environmentType: "production",
				buildType:       "branch",
				lagoonVersion:   "v2.7.x",
				branch:          "main",
				projectVars: `[
					{"name":"LAGOON_SYSTEM_ROUTER_PATTERN","value":"${service}-${project}-${environment}.example.com","scope":"internal_system"},
					{"name":"LAGOON_FASTLY_SERVICE_ID","value":"service-id:true:secretname","scope":"global"}
					]`,
				envVars:      `[]`,
				secretPrefix: "fastly-api-",
				lagoonYAML:   "test-resources/template-autogenerated/single-lagoon.yml",
				templatePath: "test-resources/template-autogenerated/output",
			},
			emptyDir: false,
			want:     "test-resources/template-autogenerated/test10-results",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// set the environment variables from args
			err := os.Setenv("MONITORING_ALERTCONTACT", tt.args.alertContact)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("MONITORING_STATUSPAGEID", tt.args.statusPageID)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("PROJECT", tt.args.projectName)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("ENVIRONMENT", tt.args.environmentName)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("BRANCH", tt.args.branch)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("PR_NUMBER", tt.args.prNumber)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("PR_HEAD_BRANCH", tt.args.prHeadBranch)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("PR_BASE_BRANCH", tt.args.prBaseBranch)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("ENVIRONMENT_TYPE", tt.args.environmentType)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("BUILD_TYPE", tt.args.buildType)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("ACTIVE_ENVIRONMENT", tt.args.activeEnvironment)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("STANDBY_ENVIRONMENT", tt.args.standbyEnvironment)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("LAGOON_FASTLY_NOCACHE_SERVICE_ID", tt.args.cacheNoCache)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("LAGOON_PROJECT_VARIABLES", tt.args.projectVars)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("LAGOON_ENVIRONMENT_VARIABLES", tt.args.envVars)
			if err != nil {
				t.Errorf("%v", err)
			}
			err = os.Setenv("LAGOON_VERSION", tt.args.lagoonVersion)
			if err != nil {
				t.Errorf("%v", err)
			}
			lagoonYml = tt.args.lagoonYAML
			templateValues = tt.args.valuesFilePath

			err = os.MkdirAll(tt.args.templatePath, 0755)
			if err != nil {
				t.Errorf("couldn't create directory %v: %v", savedTemplates, err)
			}
			savedTemplates = tt.args.templatePath
			fastlyAPISecretPrefix = tt.args.secretPrefix
			fastlyServiceID = tt.args.serviceID

			defer os.RemoveAll(savedTemplates)
			if err := AutogeneratedIngressGeneration(false); (err != nil) != tt.wantErr {
				t.Errorf("AutogeneratedIngressGeneration() error = %v, wantErr %v", err, tt.wantErr)
			}

			files, err := ioutil.ReadDir(savedTemplates)
			if err != nil {
				t.Errorf("couldn't read directory %v: %v", savedTemplates, err)
			}
			results, err := ioutil.ReadDir(tt.want)
			if err != nil {
				t.Errorf("couldn't read directory %v: %v", tt.want, err)
			}
			resultSize := len(results)
			if tt.emptyDir {
				// .gitkeep file needs to be subtracted to equal 0
				resultSize = len(results) - 1
			}
			if len(files) != resultSize {
				for _, f := range files {
					f1, err := os.ReadFile(fmt.Sprintf("%s/%s", savedTemplates, f.Name()))
					if err != nil {
						t.Errorf("couldn't read file %v: %v", savedTemplates, err)
					}
					fmt.Println(string(f1))
				}
				t.Errorf("number of generated templates doesn't match results %v/%v: %v", len(files), resultSize, err)
			}
			fCount := 0
			for _, f := range files {
				for _, r := range results {
					if f.Name() == r.Name() {
						fCount++
						f1, err := os.ReadFile(fmt.Sprintf("%s/%s", savedTemplates, f.Name()))
						if err != nil {
							t.Errorf("couldn't read file %v: %v", savedTemplates, err)
						}
						r1, err := os.ReadFile(fmt.Sprintf("%s/%s", tt.want, f.Name()))
						if err != nil {
							t.Errorf("couldn't read file %v: %v", tt.want, err)
						}
						if !reflect.DeepEqual(f1, r1) {
							fmt.Println(string(f1))
							t.Errorf("resulting templates do not match")
						}
					}
				}
			}
			if fCount != len(files) {
				for _, f := range files {
					f1, err := os.ReadFile(fmt.Sprintf("%s/%s", savedTemplates, f.Name()))
					if err != nil {
						t.Errorf("couldn't read file %v: %v", savedTemplates, err)
					}
					fmt.Println(fmt.Sprintf("%s/%s", savedTemplates, f.Name()))
					fmt.Println(string(f1))
				}
				t.Errorf("resulting templates do not match")
			}
			t.Cleanup(func() {
				unsetEnvVars(nil)
			})
		})
	}
}
